#!/bin/bash

# CLI bash script for managing GPIO modules
#
# @author const39

BASE_DIR=$HOME/.gpio
MODULES_DIR=$BASE_DIR/modules
TEMPLATES_DIR=$BASE_DIR/templates
TO_START_FILE=$BASE_DIR/to_start.conf

installed_cmd="find $MODULES_DIR -maxdepth 1 -mindepth 1 -type d -printf %f\n"

# Prints the commands syntax on terminal
function print_syntax() {
    echo "Syntax: gpio_modules {installed|running}"
    echo "Syntax: gpio_modules {start|stop} {<module_name>|all}"
    echo "Syntax: gpio_modules create <module_name>"
}

# Add the given module name to the TO_START_FILE to enable its autostart 
# $1 : The module name
function add_to_start() {

    # Check if the module exists
    does_module_exist $1

    # Create the file if it does not exist
    touch $TO_START_FILE

    # Check if the module is already registered in the file. If not save it
    module=$(cat $TO_START_FILE | grep $1)

    if [[ -z "$module" ]]; then
        echo $1 >> $TO_START_FILE
    fi
}

# Remove the given module name from the TO_START_FILE to disable its autostart 
# $1 : The module name
function remove_to_start() {

    # Check if the module exists
    does_module_exist $1

    # Create the file if it does not exist
    touch $TO_START_FILE

    # Remove all occurrences of the module name from the file.
    sed -i "/$1/d" $TO_START_FILE
}

# Start the given module
# The script exits with an error code if the given module does not exist.
# $1 : The module name
function start_module() {

    # Check if the module exists
    does_module_exist $1

    # Stop the script if it is alreay started
    stop_module $1

    # Start the script
    sudo bash -c "python3 $MODULES_DIR/$1/$1.py &"

    # Enable autostart of this module
    add_to_start $1

    echo "GPIO module '$1' running..."
}

# Stop the given module
# The script exits with an error code if the given module does not exist.
# $1 : The module name
function stop_module() {

    # Check if the module exists
    does_module_exist $1

    # Disable autostart of this module
    remove_to_start $1

    # Stop the script
    sudo pkill -f $MODULES_DIR/$1/$1.py

    # FIXME sudo always return '0' code instead of pkill exit code

    if [[ "$?" == 0 ]]; then
        echo "Stopped GPIO module '$1'."
    else 
        echo "Warning: GPIO module '$1' was not running."
    fi
}

# Start all installed modules by calling the 'start_module' function on all installed modules.
function start_all_modules() {

    installed=`$installed_cmd`

    for module in $installed; do
        start_module $module
    done
}

# Stop all running modules by calling the 'stop_module' function on all running modules.
function stop_all_modules() {

    running=`ps -e -o args | grep -v "grep" | grep -o "$MODULES_DIR/.*\.py" | grep -o "[^/]*$" | cut -d. -f 1`

    for module in $running; do
        stop_module $module
    done
}

# Print on the terminal the list of currently installed modules.
# This function looks for the modules in the MODULES_DIR directory.
function installed_modules() {

    installed=`$installed_cmd`
    if [[ -z "$installed" ]]; then
        echo "No GPIO module is currently installed."
    else 
        echo "Currently installed GPIO modules:" 
        printf "$installed\n"
    fi
}

# Print on the terminal the list of currently running modules.
# This function looks for the modules in the MODULES_DIR directory.
function running_modules() {

    running=`ps -e -o args | grep -v "grep" | grep -o "$MODULES_DIR/.*\.py" | grep -o "[^/]*$" | cut -d. -f 1`

    if [[ -z "$running" ]]; then
        echo "No GPIO module is currently running."
    else 
        echo "Currently running GPIO modules:" 
        printf "$running\n"
    fi
}

# Create a new module
# If no module name is given or if a module with the given name already exist, the function exits with an error code.
# $1 : the module name
function create_module() {

    # Check if a module name is given
    if [[ -z "$1" ]]; then
        echo "Error: No module name given."
        print_syntax
        exit 1
    fi 

    # Check if a module already exist with the given name
    if [[ -d "$MODULES_DIR/$1" ]]; then
        echo "Error: Module '$1' already exists."
        exit 1
    fi    

    # Create new module directory and copy module template file 
    mkdir $MODULES_DIR/$1
    cp $TEMPLATES_DIR/module_template.py $MODULES_DIR/$1/$1.py

    if [[ "$?" == 0 ]]; then
        echo "Created GPIO module '$1'."
        echo "You can edit the script in $MODULES_DIR/$1."
    else 
        echo "Error: GPIO module '$1' could not be created."
        exit 1
    fi
}

# Check if the module exist
# If it exist, does nothing. Otherwise, the function exits with an error code.
# $1 : the module name
function does_module_exist() {

    if [[ -z "$1" ]]; then
        echo "Error: No module name given."
        print_syntax
        exit 1
    fi 

    if [[ ! -d "$MODULES_DIR/$1" ]]; then
        echo "Error: Module '$1' not found."
        exit 1
    fi
}

# Parse the command
function parse_cmd() {

    if [[ -z "$1" ]]; then
        echo "Error: No action given."
        print_syntax
        exit 1
    fi 

    case "$1" in 
        "start")
            if [[ "$2" == "all" ]]; then 
                start_all_modules
            else 
                start_module $2
            fi
        ;;

        "stop")
            if [[ "$2" == "all" ]]; then 
                stop_all_modules
            else 
                stop_module $2
            fi
        ;;

        "create")
            create_module $2
        ;;

        "installed")
            installed_modules
        ;;
        
        "running")
            running_modules
        ;;

        *)
            echo "Error: Action '$1' unknown."
            print_syntax
            exit 1
        ;;
    esac
}

action=$1   # Arg1 = action (e.g. 'start')
module=$2   # Arg2 = module_name (e.g. 'on_off_button')

parse_cmd $action $module